package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import corebusiness.pianiVacanze.Porto;
import corebusiness.pianiVacanze.exception.PortoNotFound;

public class Porto_DAO {
	protected static java.util.Map<Integer,Porto> restoredObjects= new java.util.HashMap<Integer,Porto>();
	public static Porto create(Integer IDPorto) throws SQLException{
		Connection c = DBManager.getConnection();
		PreparedStatement preparedstat = c.prepareStatement("INSERT INTO porti (IdPorto) VALUES (?)");
		preparedstat.setInt(1, IDPorto);
		preparedstat.executeUpdate();
		preparedstat.close();
		Porto port=new Porto(IDPorto);
		restoredObjects.put(IDPorto, port);
		return port;

	}
	public static Porto create() throws SQLException{
		Connection c = DBManager.getConnection();
		Statement stat = c.createStatement();
		int id;
		try {
			stat.executeUpdate("INSERT INTO porti (Nome) VALUES ('')");
			ResultSet rs = stat.getGeneratedKeys();
			if (rs.next() == false) {
				throw new SQLException("ID value was not autogenerated!");
			}
			id = rs.getInt(1);
		} finally {
			stat.close();	
		}
		
		Porto port=new Porto(id);
		restoredObjects.put(id, port);
		return port;

	}
	public static Porto read(Integer IDPorto) throws SQLException, PortoNotFound{
		if(restoredObjects.containsKey(IDPorto)){
			return restoredObjects.get(IDPorto);
		}
		Connection connessione=DBManager.getConnection();
		PreparedStatement preparedStatement = connessione.prepareStatement("SELECT * FROM porti WHERE IdPorto=?");
		preparedStatement.setInt(1, IDPorto);
		Porto port = null;
		ResultSet rs= preparedStatement.executeQuery();
		if(rs.first()){
			if (!rs.wasNull()){
				port=new Porto(rs.getInt("IdPorto"),rs.getString("Nome"));
				restoredObjects.put(IDPorto, port);
			}
		}
		else {
			throw new PortoNotFound();
		}
		rs.close();
		preparedStatement.close();
		return port;
	}
	public static void update(Porto porto) throws SQLException, PortoNotFound{
		if(porto.getIDPorto()==null){
			Porto port = Porto_DAO.create(); // Ottengo un nuovo id
			porto.setIDPorto(port.getIDPorto());
			restoredObjects.put(porto.getIDPorto(), porto); 

		}
		Connection connessione=DBManager.getConnection();
		PreparedStatement preparedStatement=connessione.prepareStatement("UPDATE porti SET Nome=? WHERE IdPorto=?");
		preparedStatement.setString(1, porto.getNome());
		preparedStatement.setInt(2, porto.getIDPorto());
		boolean rowaffected = preparedStatement.execute();
		if(!rowaffected){
			DBManager.closeConnection();
			throw new PortoNotFound();
		}
	}	
	public static void delete(Porto porto) throws SQLException {
		Integer id=porto.getIDPorto();
		if(id != null){
			Connection connection = DBManager.getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement("DELETE FROM porti WHERE IdPorto=?");
			preparedStatement.setInt(1, porto.getIDPorto());
			preparedStatement.executeUpdate();
			restoredObjects.remove(id);			
			porto.setIDPorto(null);
			preparedStatement.close();
		}
	}
	public static ArrayList<Porto> allread() throws SQLException{
		Connection connessione=DBManager.getConnection();
		PreparedStatement preparedStatement = connessione.prepareStatement("SELECT * FROM porti");
		ArrayList<Porto> listaporti = new ArrayList<Porto>();
		ResultSet rs= preparedStatement.executeQuery();
		while(rs.next()){
				listaporti.add(new Porto(rs.getInt("IdPorto"),rs.getString("Nome")));
		}

		rs.close();
		preparedStatement.close();
		return listaporti;
	}
}
