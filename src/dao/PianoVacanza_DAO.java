package dao;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import corebusiness.pianiVacanze.PianoVacanza;
import corebusiness.pianiVacanze.exception.PianoVacanzaNotFound;
import corebusiness.pianiVacanze.exception.PortoNotFound;
public class PianoVacanza_DAO {
	protected static java.util.Map<Integer,PianoVacanza> restoredObjects= new java.util.HashMap<Integer,PianoVacanza>();
	public static PianoVacanza create(Integer IDPianoVacanza) throws SQLException{
		Connection c = DBManager.getConnection();
		PreparedStatement preparedstat = c.prepareStatement("INSERT INTO pianivacanze (IDPianoVacanza) VALUES (?)");
		preparedstat.setInt(1, IDPianoVacanza);
		preparedstat.executeUpdate();
		preparedstat.close();
		PianoVacanza piano=new PianoVacanza(IDPianoVacanza);
		restoredObjects.put(IDPianoVacanza, piano);
		return piano;

	}
	public static PianoVacanza create() throws SQLException{
		Connection c = DBManager.getConnection();
		Statement stat = c.createStatement();
		int id;
		try {
			stat.executeUpdate("INSERT INTO pianivacanze (DataPartenza,NumeroMassimo,Costo,DataArrivo,PortoPartenza,PortoArrivo,Barca) VALUES (NULL,0,0,NULL,NULL,NULL, NULL)");
			ResultSet rs = stat.getGeneratedKeys();
			if (rs.next() == false) {
				throw new SQLException("ID value was not autogenerated!");
			}
			id = rs.getInt(1);
		} finally {
			stat.close();	
		}
		
		PianoVacanza piano=new PianoVacanza(id);
		restoredObjects.put(id, piano);
		return piano;

	}
	public static PianoVacanza read(Integer IDPianoVacanza) throws SQLException, PianoVacanzaNotFound{
		if(restoredObjects.containsKey(IDPianoVacanza)){
			return restoredObjects.get(IDPianoVacanza);
		}
		Connection connessione=DBManager.getConnection();
		PreparedStatement preparedStatement = connessione.prepareStatement("SELECT * FROM pianivacanze WHERE IdPianoVacanza=?");
		preparedStatement.setInt(1, IDPianoVacanza);
		PianoVacanza piano = null;
		ResultSet rs= preparedStatement.executeQuery();
		if(rs.first()){
			if (!rs.wasNull()){
				try {
					piano=new PianoVacanza(rs.getInt("IDPianoVacanza"),rs.getDate("DataPartenza"),
							rs.getInt("NumeroMassimo"),rs.getInt("Costo"),rs.getDate("DataArrivo"),null,Porto_DAO.read(rs.getInt("PortoPartenza")),Porto_DAO.read(rs.getInt("PortoArrivo")));
				} catch (PortoNotFound e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				restoredObjects.put(IDPianoVacanza, piano);
			}
		}
		else {
			throw new PianoVacanzaNotFound();
		}
		rs.close();
		preparedStatement.close();
		return piano;
	}
	public static void update(PianoVacanza pianoVacanza) throws SQLException, PianoVacanzaNotFound{
		if(pianoVacanza.getIDPianoVacanza()==null){
			PianoVacanza Piano = PianoVacanza_DAO.create(); // Ottengo un nuovo id
			pianoVacanza.setIDPianoVacanza(Piano.getIDPianoVacanza());
			restoredObjects.put(pianoVacanza.getIDPianoVacanza(), pianoVacanza); 

		}
		Connection connessione=DBManager.getConnection();
		PreparedStatement preparedStatement=connessione.prepareStatement("UPDATE pianivacanze SET DataPartenza=? ,NumeroMassimo=?,Costo=?,DataArrivo=?,PortoPartenza=?,PortoArrivo=?,Barca=? WHERE IdPianoVacanza=?");
		preparedStatement.setDate(1, new Date(pianoVacanza.getDataPartenza().getTime()));
		preparedStatement.setInt(2, pianoVacanza.getNumeroMassimo());
		preparedStatement.setInt(3, pianoVacanza.getCosto());
		preparedStatement.setDate(4, new Date(pianoVacanza.getDataArrivo().getTime()));
		preparedStatement.setInt(5, pianoVacanza.getPortoPartenza().getIDPorto());
		preparedStatement.setInt(6, pianoVacanza.getPortoArrivo().getIDPorto());
		preparedStatement.setInt(7, pianoVacanza.getBarca().getIdBarca());
		preparedStatement.setInt(8, pianoVacanza.getIDPianoVacanza());
		boolean rowaffected = preparedStatement.execute();
		if(!rowaffected){
			throw new PianoVacanzaNotFound();
		}
		DBManager.closeConnection();
	}
	
	public static void delete(PianoVacanza piano) throws SQLException {
		Integer id=piano.getIDPianoVacanza();
		if(id != null){
			Connection connection = DBManager.getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement("DELETE FROM pianivacanze WHERE IDPianoVacanza=?");
			preparedStatement.setInt(1, piano.getIDPianoVacanza());
			preparedStatement.executeUpdate();
			restoredObjects.remove(id);			
			piano.setIDPianoVacanza(null);
			preparedStatement.close();
		}
	}
	public static ArrayList<PianoVacanza> allread() throws SQLException{
		Connection connessione=DBManager.getConnection();
		PreparedStatement preparedStatement = connessione.prepareStatement("SELECT * FROM pianivacanze");
		ArrayList<PianoVacanza> listapiani = new ArrayList<PianoVacanza>();
		ResultSet rs= preparedStatement.executeQuery();
		while(rs.next()){
				try {
					listapiani.add(new PianoVacanza(rs.getInt("IDPianoVacanza"),rs.getDate("DataPartenza"),
							rs.getInt("NumeroMassimo"),rs.getInt("Costo"),rs.getDate("DataArrivo"),null,Porto_DAO.read(rs.getInt("PortoPartenza")),Porto_DAO.read(rs.getInt("PortoArrivo"))));
				} catch (PortoNotFound e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}

		rs.close();
		preparedStatement.close();
		return listapiani;
	}
}
